"""
Django settings for m2django project.

Generated by 'django-admin startproject' using Django 5.1.11.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--4&)0d5n5z_qz2w+fs_07p&u=l1qznf*h2#(f2@pd$=@2o_4sb'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']  # Allow all hosts for development (including subdomains)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'storages',  # Add django-storages
    'imagekit',
    'core',
    'accounts',
    'products',
    'brands',
    'cart',
    'support',
    'designer',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'brands.middleware.BrandMiddleware',  # Add brand detection early
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'm2django.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'cart.context_processors.cart_context',
                'brands.context_processors.brand_context',
                'core.context_processors.guest_data_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'm2django.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 6,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'accounts.User'

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'accounts.backends.EmailBackend',  # Custom backend for email login
    'django.contrib.auth.backends.ModelBackend',  # Default backend
]

# Login URLs
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/accounts/dashboard/'
LOGOUT_REDIRECT_URL = '/'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Static files
STATICFILES_DIRS = [
    BASE_DIR / 'core' / 'static',
]

# Site configuration
SITE_NAME = 'Model2Design'


# PIL/Pillow Settings for handling large images
from PIL import Image
# Increase max image pixels to handle large images (500 megapixels)
Image.MAX_IMAGE_PIXELS = 500000000  # 500 million pixels

# Alternative: Set to None to disable the check entirely (use with caution)
# Image.MAX_IMAGE_PIXELS = None

# Maximum file upload size (25MB)
FILE_UPLOAD_MAX_MEMORY_SIZE = 25 * 1024 * 1024  # 25MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 25 * 1024 * 1024  # 25MB

# =====================================
# Cloudflare R2 Storage Configuration
# =====================================
USE_R2_STORAGE = os.getenv('USE_R2_STORAGE', 'False').lower() == 'true'

# R2 Credentials (from environment variables)
AWS_ACCESS_KEY_ID = os.getenv('R2_ACCESS_KEY_ID', '')
AWS_SECRET_ACCESS_KEY = os.getenv('R2_SECRET_ACCESS_KEY', '')

# R2 Bucket Configuration
AWS_STORAGE_BUCKET_NAME = os.getenv('R2_BUCKET_NAME', 'your-bucket-name')
R2_ACCOUNT_ID = os.getenv('R2_ACCOUNT_ID', 'your-account-id')
AWS_S3_ENDPOINT_URL = f'https://{R2_ACCOUNT_ID}.r2.cloudflarestorage.com'
AWS_S3_REGION_NAME = 'auto'  # R2 uses 'auto' for region

# R2 Settings
AWS_S3_USE_SSL = True
AWS_S3_VERIFY = True
AWS_DEFAULT_ACL = None  # R2 doesn't use ACLs
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',  # 1 day cache for media files
}

# Optional: Custom domain for R2 (if you've set up a custom domain)
AWS_S3_CUSTOM_DOMAIN = os.getenv('R2_CUSTOM_DOMAIN', None)

# Storage Backend Configuration
if USE_R2_STORAGE:
    # Use R2 for media files
    DEFAULT_FILE_STORAGE = 'core.storage_backends.R2MediaStorage'
    STORAGES = {
        "default": {
            "BACKEND": "core.storage_backends.R2MediaStorage",
        },
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        },
    }
    
    # ImageKit configuration to use R2
    IMAGEKIT_DEFAULT_FILE_STORAGE = 'core.storage_backends.R2MediaStorage'
    IMAGEKIT_SPEC_CACHEFILE_STORAGE = 'core.storage_backends.R2MediaStorage'
    
    # Optional: Also use R2 for static files (uncomment if desired)
    # STATICFILES_STORAGE = 'core.storage_backends.R2StaticStorage'
    
    # Media files URL (will be constructed from bucket and endpoint)
    if AWS_S3_CUSTOM_DOMAIN:
        MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'
    else:
        MEDIA_URL = f'{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/media/'
    
    print(f"‚úÖ R2 Storage enabled - Bucket: {AWS_STORAGE_BUCKET_NAME}")
else:
    # Use local storage (default)
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
    STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
        },
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        },
    }
    # Media files URL for local storage
    MEDIA_URL = '/media/'
    print("üìÅ Using local storage for media files")

